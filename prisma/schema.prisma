generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                  Int                @id @default(autoincrement())
  nome                String
  email               String             @unique
  senha               String
  tipo                TipoUsuario        @default(USUARIO)
  criadoEm            DateTime           @default(now())
  atualizadoEm        DateTime           @updatedAt
  transacoesCliente   TransacaoCliente[]
  transacoesConta     TransacaoConta[]
  ultimaSincronizacao String?
}

model Cliente {
  id    Int    @id @default(autoincrement())
  nome  String
  email String @unique

  saldo         Decimal @default(0) @db.Decimal(18, 2)
  depositoTotal Decimal @default(0) @db.Decimal(18, 2)
  gastoTotal    Decimal @default(0) @db.Decimal(18, 2)

  saldoCliente Decimal @default(0) @db.Decimal(18, 2)
  alocacao     Decimal @default(0) @db.Decimal(18, 2)

  cnpj              String
  fee               String
  criadoEm          DateTime              @default(now())
  atualizadoEm      DateTime              @updatedAt
  contasAnuncio     ClienteContaAnuncio[]
  transacoesCliente TransacaoCliente[]
}

model AdAccount {
  id            String  @id @map("account_id")
  nome          String  @map("name")
  status        Int     @map("account_status")
  moeda         String  @map("currency")
  fusoHorario   String  @map("timezone_name")
  gastoAPI      String  @map("amount_spent")
  depositoTotal Decimal @default(0) @db.Decimal(16, 2)
  gastoTotal    Decimal @default(0) @db.Decimal(16, 2)
  saldo         Decimal @default(0) @db.Decimal(16, 2)

  realocacao_entrada_total Decimal @default(0) @db.Decimal(16, 2)
  realocacao_saida_total   Decimal @default(0) @db.Decimal(16, 2)
  alocacao_entrada_total   Decimal @default(0) @db.Decimal(16, 2)
  alocacao_saida_total     Decimal @default(0) @db.Decimal(16, 2)

  // Substitui o campo Json
  limiteCritico String @default("0")
  limiteMedio   String @default("0")
  limiteInicial String @default("0")

  limiteGasto         String    @default("0")
  saldoMeta           String    @default("0")
  ultimaSincronizacao String    @default("0")
  ultimoAlertaEnviado DateTime?
  alertaAtivo         Boolean   @default(true)

  clientesHistorico ClienteContaAnuncio[] @relation("HistoricoClienteContaAnuncio")
  GastoDiario       GastoDiario[]
  transacoesDestino TransacaoConta[]      @relation("ContaDestino")
  transacoesOrigem  TransacaoConta[]      @relation("ContaOrigem")

  AdAccountStatusChange AdAccountStatusChange[]

  BM   BM?     @relation(fields: [BMId], references: [BMId])
  BMId String?

  // ✅ Relacionamento com PIX
  pix MetaPix[] @relation("AdAccountToMetaPix")
}

model AdAccountStatusChange {
  id         BigInt   @id @default(autoincrement())
  accountId  String   @map("account_id") // referencia AdAccount.id (account_id)
  name       String?  @map("name") // nome da conta
  date       DateTime @default(now()) @map("date") // data da mudança
  fromStatus Int      @map("from_status") // 1 ou 2
  toStatus   Int      @map("to_status") // 1 ou 2
  value      String?  @map("value") // valor da mudança

  account AdAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model ClienteContaAnuncio {
  id             Int    @id @default(autoincrement())
  clienteId      Int
  contaAnuncioId String

  inicioAssociacao DateTime  @default(now())
  fimAssociacao    DateTime?

  ativo     Boolean @default(true)
  historico Boolean @default(false)

  gastoTotal    Decimal @default(0) @db.Decimal(16, 2)
  saldo         Decimal @default(0) @db.Decimal(16, 2)
  depositoTotal Decimal @default(0) @db.Decimal(16, 2)

  realocacao_entrada Decimal @default(0) @db.Decimal(16, 2)
  realocacao_saida   Decimal @default(0) @db.Decimal(16, 2)
  alocacao_entrada   Decimal @default(0) @db.Decimal(16, 2)
  alocacao_saida     Decimal @default(0) @db.Decimal(16, 2)

  limiteGasto         String? @map("spend_cap")
  saldoMeta           String? @map("balance")
  ultimaSincronizacao String?

  cliente      Cliente   @relation(fields: [clienteId], references: [id])
  contaAnuncio AdAccount @relation("HistoricoClienteContaAnuncio", fields: [contaAnuncioId], references: [id])

  @@unique([clienteId, contaAnuncioId, inicioAssociacao])
}

model TransacaoCliente {
  id            Int                  @id @default(autoincrement())
  tipo          TipoTransacaoCliente
  valor         Decimal              @db.Decimal(18, 2)
  dataTransacao DateTime             @default(now())
  fee           String?
  valorAplicado Decimal?             @db.Decimal(18, 2)
  clienteId     Int
  usuarioId     Int
  createdAt     DateTime             @default(now())

  cliente Cliente @relation(fields: [clienteId], references: [id])
  usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@index([clienteId, dataTransacao])
}

model TransacaoConta {
  id             Int                @id @default(autoincrement())
  tipo           TipoTransacaoConta
  valor          Decimal            @db.Decimal(18, 2)
  dataTransacao  DateTime           @default(now())
  contaOrigemId  String?
  contaDestinoId String?
  usuarioId      Int
  contaDestino   AdAccount?         @relation("ContaDestino", fields: [contaDestinoId], references: [id])
  contaOrigem    AdAccount?         @relation("ContaOrigem", fields: [contaOrigemId], references: [id])
  usuario        Usuario            @relation(fields: [usuarioId], references: [id])

  @@index([dataTransacao])
}

model GastoDiario {
  id             Int       @id @default(autoincrement())
  contaAnuncioId String
  data           DateTime
  gasto          Decimal   @db.Decimal(18, 2)
  contaAnuncio   AdAccount @relation(fields: [contaAnuncioId], references: [id])

  @@unique([contaAnuncioId, data])
  @@index([contaAnuncioId, data])
}

model BM {
  id           Int      @id @default(autoincrement())
  BMId         String   @unique
  nome         String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  // Relação com Token
  tokenId Int
  token   Token @relation(fields: [tokenId], references: [id])

  AdAccounts AdAccount[]
}

model MetaPix {
  id              String   @id @default(cuid())
  accountId       String
  bmId            String
  bmNome          String
  usuarioId       String
  usuarioNome     String
  valor           Decimal  @db.Decimal(16, 2)
  codigoCopiaCola String   // código "copia e cola" do PIX
  imageUrl        String   // URL Cloudinary da imagem do QR

  // (opcionais, mas úteis para auditoria/relatórios)
  tipoRetorno       String?     // p.ex.: "APROVACAO"
  codigoSolicitacao String?     // id de solicitação retornado pela API
  dataPagamento     DateTime?   // data do pagamento (se houver)
  dataOperacao      DateTime?   // data da operação (criação)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 🔗 Associação com AdAccount
  conta AdAccount @relation(fields: [accountId], references: [id], name: "AdAccountToMetaPix")

  // Índices/constraints úteis
  @@index([accountId, createdAt], map: "idx_metapix_account_created")
  @@unique([codigoCopiaCola], map: "uq_metapix_codigo")
}


model Token {
  id         Int      @id @default(autoincrement())
  title      String   @unique
  client_id  String   @unique
  secret_id  String   @unique
  last_token String   @unique
  token      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  situacao  String?  @default("ATIVO")
  spend_date DateTime?
  // Relação inversa
  bms BM[]
}

enum TipoUsuario {
  ADMIN
  GERENTE
  USUARIO
}

enum TipoTransacaoCliente {
  ENTRADA
  SAIDA
}

enum TipoTransacaoConta {
  ENTRADA
  SAIDA
  REALOCACAO
}

// NovakACADEMY

model Trilha {
  id         Int      @id @default(autoincrement())
  nome       String
  descricao  String?
  created_at DateTime @default(now())

  modulos Modulo[]
}

model Modulo {
  id         Int      @id @default(autoincrement())
  nome       String
  descricao  String?
  created_at DateTime @default(now())

  // FK -> Trilha
  trilhaId Int
  trilha   Trilha @relation(fields: [trilhaId], references: [id], onDelete: Cascade)

  secoes Secao[]

  // Total de duração (em segundos) agregado de todas as aulas do módulo
  totalDurationSeconds Int @default(0)

  @@index([trilhaId])
}

model Secao {
  id         Int      @id @default(autoincrement())
  nome       String
  descricao  String?
  created_at DateTime @default(now())
  moduloId   Int
  modulo     Modulo   @relation(fields: [moduloId], references: [id], onDelete: Cascade)

  aulas                Aula[]
  totalDurationSeconds Int    @default(0)

  atividades Atividade[]

  @@index([moduloId])
}

model Atividade {
  id      Int   @id @default(autoincrement())
  secaoId Int
  secao   Secao @relation(fields: [secaoId], references: [id], onDelete: Cascade)

  // Array de perguntas e respostas no formato JSON
  // Estrutura sugerida abaixo
  quiz Json

  titulo     String?
  descricao  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([secaoId])
}

model Aula {
  id         Int      @id @default(autoincrement())
  nome       String
  descricao  String?
  created_at DateTime @default(now())

  // FK -> Secao
  secaoId Int
  secao   Secao @relation(fields: [secaoId], references: [id], onDelete: Cascade)

  // URL do vídeo (obrigatória)
  videoUrl String

  // Duração da aula em segundos (obrigatória para facilitar agregações)
  durationSeconds Int

  anexos Anexo[]

  @@index([secaoId])
}

model Anexo {
  id          Int      @id @default(autoincrement())
  title       String
  downloadUrl String
  created_at  DateTime @default(now())

  // FK -> Aula
  aulaId Int
  aula   Aula @relation(fields: [aulaId], references: [id], onDelete: Cascade)

  @@index([aulaId])
}


model ExtratoTransacaoInter {
  id             Int       @id @default(autoincrement())
  externalId     String?   @unique
  fingerprint    String?   @unique
  dataEntrada    DateTime?
  dataEfetivacao DateTime?
  valor          Decimal
  descricao      String?
  tipoOperacao   String?
  tipoTransacao  String?
  raw            Json
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}
